syntax = "proto3";

import "google/protobuf/any.proto";
import "core/Tron.proto";

package protocol;


option java_package = "org.tron.protos"; //Specify the name of the package that generated the Java file
option java_outer_classname = "Sidechain"; //Specify the class name of the generated Java file
option go_package = "github.com/tronprotocol/grpc-gateway/core";

message TransactionExtension {
  Transaction transaction = 1;
  bytes transaction_id = 2;
  TaskEnum task_enum = 3;
}

enum TaskEnum {
  MAIN_CHAIN = 0x00;
  SIDE_CHAIN = 0x01;
}


message EventMsg {
  enum EventType {
    DEPOSIT_TRC10_EVENT = 0;
    DEPOSIT_TRC20_EVENT = 1;
    DEPOSIT_TRC721_EVENT = 2;
    DEPOSIT_TRX_EVENT = 3;
    DEPLOY_DAPPTRC20_AND_MAPPING_EVENT = 4;
    DEPLOY_DAPPTRC721_AND_MAPPING_EVENT = 5;
    MULTISIGN_FOR_WITHDRAW_TOKEN_EVENT = 6;
    MULTISIGN_FOR_WITHDRAW_TRC10_EVENT = 7;
    MULTISIGN_FOR_WITHDRAW_TRX_EVENT = 8;
    MULTISIGN_FOR_MAPPING_EVENT = 9;
    WITHDRAW_TRC10_EVENT = 10;
    WITHDRAW_TRC20_EVENT = 11;
    WITHDRAW_TRC721_EVENT = 12;
    WITHDRAW_TRX_EVENT = 13;
  }
  EventType type = 1;
  google.protobuf.Any parameter = 2;
}

message DepositTRC10Event {
  bytes from = 1;
  bytes value = 2;
  bytes trc10 = 3;
  bytes transaction_id = 4;
}

// Update account name. Account name is not unique now.
message DepositTRC20Event {
  bytes from = 1;
  bytes value = 2;
  bytes contract_address = 3;
  bytes transaction_id = 4;
}

// Set account id if the account has no id. Account id is unique and case insensitive.
message DepositTRC721Event {
  bytes from = 1;
  bytes token_id = 2;
  bytes contract_address = 3;
  bytes transaction_id = 4;
}

message DepositTRXEvent {
  bytes from = 1;
  bytes value = 2;
  bytes transaction_id = 3;
}

message DeployDAppTRC20AndMappingEvent {
  bytes developer = 1;
  bytes mainchain_address = 2;
  bytes sidechain_address = 3;
  bytes transaction_id = 4;
}


message DeployDAppTRC721AndMappingEvent {
  bytes developer = 1;
  bytes mainchain_address = 2;
  bytes sidechain_address = 3;
  bytes transaction_id = 4;
}

message MultiSignForWithdrawTokenEvent {
  bytes from = 1;
  bytes mainchain_address = 2;
  bytes value_or_token_id = 3;
  bytes type = 4;
  bytes user_sign = 5;
  bytes data_hash = 6;
  bytes transaction_id = 7;
}

message MultiSignForWithdrawTRC10Event {
  bytes from = 1;
  bytes trc10 = 2;
  bytes value = 3;
  bytes user_sign = 4;
  bytes data_hash = 5;
  bytes transaction_id = 6;
}

message MultiSignForWithdrawTRXEvent {
  bytes from = 1;
  bytes value = 2;
  bytes user_sign = 3;
  bytes data_hash = 4;
  bytes transaction_id = 5;
}

message MultiSignForMappingEvent {
  bytes mainchain_address = 1;
  bytes sidechain_address = 2;
  bytes transaction_id = 3;
}

message WithdrawTRC10Event {
  bytes from = 1;
  bytes trc10 = 2;
  bytes value = 3;
  bytes user_sign = 4;
  bytes transaction_id = 5;
}

message WithdrawTRC20Event {
  bytes from = 1;
  bytes mainchain_address = 2;
  bytes value = 3;
  bytes user_sign = 4;
  bytes transaction_id = 5;
}

message WithdrawTRC721Event {
  bytes from = 1;
  bytes mainchain_address = 2;
  bytes token_id = 3;
  bytes user_sign = 4;
  bytes transaction_id = 5;
}

message WithdrawTRXEvent {
  bytes from = 1;
  bytes value = 2;
  bytes user_sign = 3;
  bytes transaction_id = 4;
}
