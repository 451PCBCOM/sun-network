package stest.tron.wallet.dailybuild.tvmnewcommand.multiValidateSignContract;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import java.util.HashMap;
import java.util.Optional;
import java.util.concurrent.TimeUnit;
import lombok.extern.slf4j.Slf4j;
import org.junit.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Test;
import org.tron.api.GrpcAPI;
import org.tron.api.WalletGrpc;
import org.tron.api.WalletSolidityGrpc;
import org.tron.common.crypto.ECKey;
import org.tron.common.utils.ByteArray;
import org.tron.common.utils.Utils;
import org.tron.core.Wallet;
import org.tron.protos.Protocol;
import org.tron.protos.Protocol.TransactionInfo;
import stest.tron.wallet.common.client.Configuration;
import stest.tron.wallet.common.client.Parameter;
import stest.tron.wallet.common.client.utils.PublicMethedForDailybuild;

@Slf4j
public class multiValidateSignContract009 {

  private final String testNetAccountKey = Configuration.getByPath("testng.conf")
      .getString("foundationAccount.key2");
  private final byte[] testNetAccountAddress = PublicMethedForDailybuild
      .getFinalAddress(testNetAccountKey);
  byte[] contractAddress = null;
  ECKey ecKey1 = new ECKey(Utils.getRandom());
  byte[] contractExcAddress = ecKey1.getAddress();
  String contractExcKey = ByteArray.toHexString(ecKey1.getPrivKeyBytes());
  String txid = "";
  private Long maxFeeLimit = Configuration.getByPath("testng.conf")
      .getLong("defaultParameter.maxFeeLimit");
  private ManagedChannel channelFull = null;
  private WalletGrpc.WalletBlockingStub blockingStubFull = null;
  private ManagedChannel channelFull1 = null;
  private WalletGrpc.WalletBlockingStub blockingStubFull1 = null;
  private WalletSolidityGrpc.WalletSolidityBlockingStub blockingStubSolidity = null;
  private String fullnode = Configuration.getByPath("testng.conf")
      .getStringList("fullnode.ip.list").get(0);
  private String fullnode1 = Configuration.getByPath("testng.conf")
      .getStringList("fullnode.ip.list").get(1);

  @BeforeSuite
  public void beforeSuite() {
    Wallet wallet = new Wallet();
    Wallet.setAddressPreFixByte(Parameter.CommonConstant.ADD_PRE_FIX_BYTE_MAINNET);
  }

  /**
   * constructor.
   */

  @BeforeClass(enabled = true)
  public void beforeClass() {
    PublicMethedForDailybuild.printAddress(contractExcKey);
    channelFull = ManagedChannelBuilder.forTarget(fullnode)
        .usePlaintext(true)
        .build();
    blockingStubFull = WalletGrpc.newBlockingStub(channelFull);
    channelFull1 = ManagedChannelBuilder.forTarget(fullnode1)
        .usePlaintext(true)
        .build();
    blockingStubFull1 = WalletGrpc.newBlockingStub(channelFull1);
    txid = PublicMethedForDailybuild
        .sendcoinGetTransactionId(contractExcAddress, 1000000000L, testNetAccountAddress,
            testNetAccountKey,
            blockingStubFull);
    PublicMethedForDailybuild.waitProduceNextBlock(blockingStubFull);
    String filePath = "src/test/resources/soliditycode/multivalidatesign001.sol";
    String contractName = "Demo";
    HashMap retMap = PublicMethedForDailybuild.getBycodeAbi(filePath, contractName);
    String code = retMap.get("byteCode").toString();
    String abi = retMap.get("abI").toString();
    contractAddress = PublicMethedForDailybuild
        .deployContract(contractName, abi, code, "", maxFeeLimit,
            0L, 100, null, contractExcKey,
            contractExcAddress, blockingStubFull);
    PublicMethedForDailybuild.waitProduceNextBlock(blockingStubFull);
  }

  @Test(enabled = true, description = "Incorrect address hex test multivalidatesign")
  public void test01IncorrectAddressHex() {
    Protocol.Account info;
    GrpcAPI.AccountResourceMessage resourceInfo = PublicMethedForDailybuild
        .getAccountResource(contractExcAddress,
            blockingStubFull);
    info = PublicMethedForDailybuild.queryAccount(contractExcKey, blockingStubFull);
    Long beforeBalance = info.getBalance();
    Long beforeEnergyUsed = resourceInfo.getEnergyUsed();
    Long beforeNetUsed = resourceInfo.getNetUsed();
    Long beforeFreeNetUsed = resourceInfo.getFreeNetUsed();
    logger.info("beforeBalance:" + beforeBalance);
    logger.info("beforeEnergyUsed:" + beforeEnergyUsed);
    logger.info("beforeNetUsed:" + beforeNetUsed);
    logger.info("beforeFreeNetUsed:" + beforeFreeNetUsed);

    String input = "7d889f42b4a56ebe78264631a3b4daf21019e1170cce71929fb396761cdf532e000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000041ad7ca8100cf0ce028b83ac719c8458655a6605317abfd071b91f5cc14d53e87a299fe0cdf6a8567074e9be3944affba33b1e15d14b7cb9003ec2c87cb1a56405000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000417ce31e565fb99451f87db65e75f46672e8a8f7b29e6589e60fd11e076550d0a66d0b05e4b4d7d40bd34140f13dc3632d3ce0f25e4cf75840238b6fe2346c94fa010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000410d6b1de9e84c1d7a9a5b43d93dbe4a5aae79b1894538739201987219873111123456548973479872894772787973597972437787";
    txid = PublicMethedForDailybuild.triggerContract(contractAddress,
        "testArray(bytes32,bytes[],address[])", input, true,
        0, maxFeeLimit, contractExcAddress, contractExcKey, blockingStubFull);

    PublicMethedForDailybuild.waitProduceNextBlock(blockingStubFull);
    Optional<TransactionInfo> infoById = null;
    infoById = PublicMethedForDailybuild.getTransactionInfoById(txid, blockingStubFull);
    Assert.assertEquals(1, infoById.get().getResultValue());
    Assert.assertTrue(infoById.get().getResMessage().toStringUtf8()
        .contains("REVERT opcode executed"));
    Long fee = infoById.get().getFee();
    Long netUsed = infoById.get().getReceipt().getNetUsage();
    Long energyUsed = infoById.get().getReceipt().getEnergyUsage();
    Long netFee = infoById.get().getReceipt().getNetFee();
    long energyUsageTotal = infoById.get().getReceipt().getEnergyUsageTotal();
    logger.info("fee:" + fee);
    logger.info("netUsed:" + netUsed);
    logger.info("energyUsed:" + energyUsed);
    logger.info("netFee:" + netFee);
    logger.info("energyUsageTotal:" + energyUsageTotal);
    Protocol.Account infoafter = PublicMethedForDailybuild
        .queryAccount(contractExcKey, blockingStubFull1);
    GrpcAPI.AccountResourceMessage resourceInfoafter = PublicMethedForDailybuild
        .getAccountResource(contractExcAddress,
            blockingStubFull1);
    Long afterBalance = infoafter.getBalance();
    Long afterEnergyUsed = resourceInfoafter.getEnergyUsed();
    Long afterNetUsed = resourceInfoafter.getNetUsed();
    Long afterFreeNetUsed = resourceInfoafter.getFreeNetUsed();
    logger.info("afterBalance:" + afterBalance);
    logger.info("afterEnergyUsed:" + afterEnergyUsed);
    logger.info("afterNetUsed:" + afterNetUsed);
    logger.info("afterFreeNetUsed:" + afterFreeNetUsed);
    Assert.assertTrue(afterBalance + fee == beforeBalance);
    Assert.assertTrue(beforeEnergyUsed + energyUsed >= afterEnergyUsed);
    Assert.assertTrue(beforeFreeNetUsed + netUsed >= afterFreeNetUsed);
    Assert.assertTrue(beforeNetUsed + netUsed >= afterNetUsed);
  }

  @Test(enabled = false, description = "Extra long address hex test multivalidatesign")
  public void test02IncorrectAddressHex() {
    Protocol.Account info;
    GrpcAPI.AccountResourceMessage resourceInfo = PublicMethedForDailybuild
        .getAccountResource(contractExcAddress,
            blockingStubFull);
    info = PublicMethedForDailybuild.queryAccount(contractExcKey, blockingStubFull);
    Long beforeBalance = info.getBalance();
    Long beforeEnergyUsed = resourceInfo.getEnergyUsed();
    Long beforeNetUsed = resourceInfo.getNetUsed();
    Long beforeFreeNetUsed = resourceInfo.getFreeNetUsed();
    logger.info("beforeBalance:" + beforeBalance);
    logger.info("beforeEnergyUsed:" + beforeEnergyUsed);
    logger.info("beforeNetUsed:" + beforeNetUsed);
    logger.info("beforeFreeNetUsed:" + beforeFreeNetUsed);

    String input = "";
    txid = PublicMethedForDailybuild.triggerContract(contractAddress,
        "testArray(bytes32,bytes[],address[])", input, true,
        0, maxFeeLimit, contractExcAddress, contractExcKey, blockingStubFull);

    PublicMethedForDailybuild.waitProduceNextBlock(blockingStubFull);
    Optional<TransactionInfo> infoById = null;
    infoById = PublicMethedForDailybuild.getTransactionInfoById(txid, blockingStubFull);
    Assert.assertEquals(1, infoById.get().getResultValue());
    Assert.assertTrue(infoById.get().getResMessage().toStringUtf8()
        .contains("REVERT opcode executed"));
    Long fee = infoById.get().getFee();
    Long netUsed = infoById.get().getReceipt().getNetUsage();
    Long energyUsed = infoById.get().getReceipt().getEnergyUsage();
    Long netFee = infoById.get().getReceipt().getNetFee();
    long energyUsageTotal = infoById.get().getReceipt().getEnergyUsageTotal();
    logger.info("fee:" + fee);
    logger.info("netUsed:" + netUsed);
    logger.info("energyUsed:" + energyUsed);
    logger.info("netFee:" + netFee);
    logger.info("energyUsageTotal:" + energyUsageTotal);
    Protocol.Account infoafter = PublicMethedForDailybuild
        .queryAccount(contractExcKey, blockingStubFull1);
    GrpcAPI.AccountResourceMessage resourceInfoafter = PublicMethedForDailybuild
        .getAccountResource(contractExcAddress,
            blockingStubFull1);
    Long afterBalance = infoafter.getBalance();
    Long afterEnergyUsed = resourceInfoafter.getEnergyUsed();
    Long afterNetUsed = resourceInfoafter.getNetUsed();
    Long afterFreeNetUsed = resourceInfoafter.getFreeNetUsed();
    logger.info("afterBalance:" + afterBalance);
    logger.info("afterEnergyUsed:" + afterEnergyUsed);
    logger.info("afterNetUsed:" + afterNetUsed);
    logger.info("afterFreeNetUsed:" + afterFreeNetUsed);
    Assert.assertTrue(afterBalance + fee == beforeBalance);
    Assert.assertTrue(beforeEnergyUsed + energyUsed >= afterEnergyUsed);
    Assert.assertTrue(beforeFreeNetUsed + netUsed >= afterFreeNetUsed);
    Assert.assertTrue(beforeNetUsed + netUsed >= afterNetUsed);
  }

  @Test(enabled = true, description = "Add the wrong character before the correct address hex test multivalidatesign")
  public void test03IncorrectAddressHex() {
    Protocol.Account info;
    GrpcAPI.AccountResourceMessage resourceInfo = PublicMethedForDailybuild
        .getAccountResource(contractExcAddress,
            blockingStubFull);
    info = PublicMethedForDailybuild.queryAccount(contractExcKey, blockingStubFull);
    Long beforeBalance = info.getBalance();
    Long beforeEnergyUsed = resourceInfo.getEnergyUsed();
    Long beforeNetUsed = resourceInfo.getNetUsed();
    Long beforeFreeNetUsed = resourceInfo.getFreeNetUsed();
    logger.info("beforeBalance:" + beforeBalance);
    logger.info("beforeEnergyUsed:" + beforeEnergyUsed);
    logger.info("beforeNetUsed:" + beforeNetUsed);
    logger.info("beforeFreeNetUsed:" + beforeFreeNetUsed);

    String input = "da586d8832d8d4b773373340901d9e6b5466c1ee4d1ef8c0548bcf1083b0dea261ca000000000000000000000000000000000000000000000000000000000000000a800000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000b800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000d800000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000e800000000000000000000000000000000000000000000000000000000000000f000000000000000000000000000000000000000000000000000000000000000fb216798251e4713865acf4c5fb9c76dc63549403ca7a3fc977edc49a3dc28ba35608aab410d140b8f9711d767ed44c2058520a1a1f129bfe9d6d91811309ab1801000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041d45f0ec7bed0442f69785920e77a37ba5bea4c617ce45f6b398d88d3db7544ef20f8557bcd0bd7cc5684d632bc724838b98f35cfa944fcbd27e198c8bb8d88af010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000417e50c132854c3376208a7675da8532f2c6d97c9c58c2185899c22975913a7d051e40de23f0d6e03276972892e4cd169e8dd55972642ff509a85a73423e6a9ff900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041dd63645e55c2d687f651a57da75cdea678ac94c242567b9de5657a738dee0dcf22a7f0e92c8d35da70cf6005fd0bb9ec8b4d767a732a63dcbaf0ad12ca614142000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000418995ee613141cbf3801ff9761e646706d7537b5800bcc528ed258aeee45cc7890483e6302e78dfdda4a79515624dc0e1727d2fd6bb72035bf517ab55d96c24fe01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041be6a378d7d3da400ae3e9b4d62111a8590fb9ca059b8c1b705b14bb5bf700725391da90337600b1ee9410d0fc5777016588290a73c0390f5d401798730ff2d5501000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041e8a5ef5c02d6fe8ccf0a361bc008b2ffc8986785775a9d1efb051fb01363a94b46682ad22188811024b99cbbbe7f1d2eb5a1ca811ea5635f9152e03228790515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000417966c88526dd22766b5da450476f2ea71a9aafce39261e738ba50c18dd68e9407032a8ebda0d16ebd804de762abb3346b9f0db67ae17ab3a7aa09487b14b80fe01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041b8f11c9d6336f6b9f5892c78129ac44a73e304e2e425d89b7c941dcbfa9940530be2d588c9fa03558ecdef1421584b271165331572dd18006b1ee23f5e3582d401000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041fcb8c0f15376d725d138a2e4233abde6ead0ad3bfa72c4a3d3d3c7755e0db8150c8691426da680195f0ed65782d0a51166bb231d39dc11bdc171128d1b1cc53c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041dd34c6af237b55155f2a1e8248936450ed0f274e8b254556bbf3834e6309f03409a198359e375ee1980e390fb9dfe79caf03a3417bd6fe1b8e00b7f7031728920000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004111f5650962249775b980e8ab4c831ce896619fc52be9e423b84eaa3cfb9c11e924048d857c235f131f3bf20853d8666e0e2d7585c6da528e57de4edad16230d801000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041440d53e6f37a963be41007ca0f7d757d7f3f4658408e77ae67dec77278a7c17a30d5a8664ff2231522b8503e867e17e596dfd0529fbb9214f86b4ad62ebc3a530100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004173d6127068fed4d68c68cc66609cf693e66d09ec0a7c79c8d87789c8bc763a4047d9e5048c8924abc530075d49f76a54e880a453d45f27c56d18bd67a3b4e7cb010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000410661c89451ca985ebc4a21128b1204ae1189c790c5d6b3c896cfe6c13ec6216751bbe19dd5fc10e99276b5b0d54ec5bb7cd624ebee1abe6949acd139e02bd44800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041b6d801c68e6ccb7e008eb799464e6ef631171ad29e568dad6e1217e7a3401544354bf7cd4cf4f3391c420443353828865bb3113876926a57ccbd569af221e7ac000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000419bde762efcd46f0f9203f0bbcc645daf92584684727dc5e547bfaa5f6ade11454d4d06e6df1a390a0e6b82c6acf0ad82dbb2db9542b26f0b23b94b0274ff7e560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004171fd6969e5c352dcebf08fac8a629b559838f0222452d98550035efa85c930f851cbaa12c99be8bae148492c6cd081891104723c422f372a9911ef2f3f91dce7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000418341a298f729bd04993a2d4bf2f7db2b585b86b243955d5589d9d4944db8614a562dfe0b48209d56a87bf67723f61a26ce5a07979b55660e057d1bc8b7c64dc00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004183022a624e7c0b57dc8e171199138a82c9a3a128a019a29f12dda44b01e2937262d33b80f08ee93959b583cc386d5c67ce67d5c7dd2e1fbdeaf22f4ff84c47b400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041510da41e62a7d29b5041dd2f9130991d46e79b3af3c2d868dffa0a249b666ba66081e25bc631f4031fa26cb99bd3909d0048b3c6d96102155dad1adf44101de90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004174d97fc7c6701b48be5d22d0e6fa8979de1a9bb377b0560933ba5ce8ec6b381e2a0ad3051532456ea69444133ae48df825b3bc21c558629615667c69538810ae00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041afbd03333662826b75afe22b8e9727766cfa21561694627e46da69bd2cd0fbff70e0f1f9c08cafd031a8a5766a16e475f501f2c6523fa1c96c26b053ce3be20b0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004176ff471ec70b84608b5b2dc614fb83cdd667b0c3008d4e7bef8ddb7f5504e6d233ff765dc1b419153c7fd9f994b800ceaa69eb39dbbd438f56095b6383fa409d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041667159867f24679fd8c759d32a415c11eba7dabdbb8df63c2598f5a7eb62198a68d36613f5ac34bb4ebfce5f5decbf8ae5bd996997f9a23a6ad0e398773e14c001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041643452cd1602540fc856dae6a1e0635cfb7b266d6efcbf9cfd2ba110eb9166c525a02c215915a94ce9f3007c18bffb068d838f148167bd55096805eb18710a1b01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041d2bbaea1b33af6110e364e6c42e25f4e33651fa9582b7f0f782912727fd943f85303ce52dbdcdc3812d07ffabe60dd14591277b0d617126712e62b6c00c4fbe50100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004120cb9dc61d357a0761b081119eb27dfad0c8d741b64418641bd27994e2bb77d9029f884f6df87f244c019c723263eddbe64b28cf9fce3756534c17eed6846b7301000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041cfdd869b17d106268f43a916d8c04e6dd64137e56bdbf7726acb2284967e1f5e5cc586e4b959e7f574121e8ba42fde409171a3996bc37bf26908bf85385052c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004195b0a9a180dc24956ce32e8780f5ce7b105f852153049751094f6b00f9a190fd0dd21bc88f1764c65ef81cac5cf483531af65794d7d9660c4eb023308ecc7db301000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041e54ca984a27704e262b10d8d919a44310a0410aa6624aba1697f63aa9c92e6cc55e888d77ea3d4d14ecaef74bb3156ef22d7041e46d913f3d7feaece508772510100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004142d6fc1fbfbbf37129084c15340f51d2c439bb00003924e25b8115ed216298b55bc344913e5e7d0ba44815e778c9732bc9588a2ee5389c2ab6cb2824a9da0f5b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000041c65a0ae3d32ef58467102cab79819cc767bd725d000000000000000000000041a30ef572c15cdf83bea881e49a60a3c97d0df852000000000000000000000041687ba8a5513a740986b6285af4f6e0eae9b9a8b400000000000000000000004117935126d2f5800c91ce953a8b63fbd3d617b9a8000000000000000000000041609cb25d8c018c1b96a5f0e9fead9856021fd482000000000000000000000041d9861cdd8abd82fe7cb07ef720f47d168776e14c0000000000000000000000410fd3dc2941c9ec1f65bc772c18e0db660ee212a9000000000000000000000041bc2717ce423755c2ddccc04329ca454b3c7e137a0000000000000000000000419c6375336a9a2c0828d14b6e44022033a9f9ee0700000000000000000000004105c73c5dc1f6831c22090eef18ac68c642a3473b000000000000000000000041871e4d9c970dac6458bfb79f70ce9c04b99dff850000000000000000000000416ef8a99024f9c56a62e2934dd3da51f6ad5990d300000000000000000000004166c47d263f842191fe8eb2b080a4b63438dae75e000000000000000000000041b7ed188e00861985ea23dd19852b565675634bac000000000000000000000041ffb7c27d8c96598d980486a183cac77684e1cb46000000000000000000000041fd2a69ef60a6c74e1f613ee620c522bd6f51cdff000000000000000000000041ac7f2771faa36afbdc25cae86ed7b828c0e437780000000000000000000000415842b82270cc33f2d67d7ef436bafdedf9b6b40c000000000000000000000041621f77c3b11726269812197c702736f184a4a3ff0000000000000000000000410ae428dc2ada397b130660a1869b205999029522000000000000000000000041b9206b3a7db7262fa228ba71bd364872ef0ae17d000000000000000000000041c6c3417b8a493b1eb2d048f4d3f5830b7bd1994e00000000000000000000004149b21325853ed2185e0229338dce07b419ead2cc000000000000000000000041c4e1e552da1452a04230a1561b615747c5c9bd11000000000000000000000041b31687e5d1437eba20f89330588f7aacf0d79912000000000000000000000041fff261a28acf2824e95d3baf857c2cafa96d391f00000000000000000000004139d15e45d0ee255f3e3128f33617b2f6b0cc38e5000000000000000000000041f296e6b4b25e6ab0312b4d37776c7cbe272c1841000000000000000000000041d1568e7a51953f127e54026ad38148bd9f7893cf000000000000000000000041a22d2944c45818ab309ac0910656b682f5b4650f000000000000000000000041d383a76cb1c8a127f8f0a8e992c0563e1e8c791b000000000000000098769741a2eef0f2ef3794ea8b9fc40d44c45ad0959521a2";
    txid = PublicMethedForDailybuild.triggerContract(contractAddress,
        "testArray(bytes32,bytes[],address[])", input, true,
        0, maxFeeLimit, contractExcAddress, contractExcKey, blockingStubFull);

    PublicMethedForDailybuild.waitProduceNextBlock(blockingStubFull);
    Optional<TransactionInfo> infoById = null;
    infoById = PublicMethedForDailybuild.getTransactionInfoById(txid, blockingStubFull);
    Assert.assertEquals(1, infoById.get().getResultValue());
    Assert.assertTrue(infoById.get().getResMessage().toStringUtf8()
        .contains("REVERT opcode executed"));
    Long fee = infoById.get().getFee();
    Long netUsed = infoById.get().getReceipt().getNetUsage();
    Long energyUsed = infoById.get().getReceipt().getEnergyUsage();
    Long netFee = infoById.get().getReceipt().getNetFee();
    long energyUsageTotal = infoById.get().getReceipt().getEnergyUsageTotal();
    logger.info("fee:" + fee);
    logger.info("netUsed:" + netUsed);
    logger.info("energyUsed:" + energyUsed);
    logger.info("netFee:" + netFee);
    logger.info("energyUsageTotal:" + energyUsageTotal);
    Protocol.Account infoafter = PublicMethedForDailybuild
        .queryAccount(contractExcKey, blockingStubFull1);
    GrpcAPI.AccountResourceMessage resourceInfoafter = PublicMethedForDailybuild
        .getAccountResource(contractExcAddress,
            blockingStubFull1);
    Long afterBalance = infoafter.getBalance();
    Long afterEnergyUsed = resourceInfoafter.getEnergyUsed();
    Long afterNetUsed = resourceInfoafter.getNetUsed();
    Long afterFreeNetUsed = resourceInfoafter.getFreeNetUsed();
    logger.info("afterBalance:" + afterBalance);
    logger.info("afterEnergyUsed:" + afterEnergyUsed);
    logger.info("afterNetUsed:" + afterNetUsed);
    logger.info("afterFreeNetUsed:" + afterFreeNetUsed);
    Assert.assertTrue(afterBalance + fee == beforeBalance);
    Assert.assertTrue(beforeEnergyUsed + energyUsed >= afterEnergyUsed);
    Assert.assertTrue(beforeFreeNetUsed + netUsed >= afterFreeNetUsed);
    Assert.assertTrue(beforeNetUsed + netUsed >= afterNetUsed);
  }

  @Test(enabled = true, description = "Empty address and signatures hex test multivalidatesign")
  public void test04EmptyAddressAndSignaturesHex() {
    Protocol.Account info;
    GrpcAPI.AccountResourceMessage resourceInfo = PublicMethedForDailybuild
        .getAccountResource(contractExcAddress,
            blockingStubFull);
    info = PublicMethedForDailybuild.queryAccount(contractExcKey, blockingStubFull);
    Long beforeBalance = info.getBalance();
    Long beforeEnergyUsed = resourceInfo.getEnergyUsed();
    Long beforeNetUsed = resourceInfo.getNetUsed();
    Long beforeFreeNetUsed = resourceInfo.getFreeNetUsed();
    logger.info("beforeBalance:" + beforeBalance);
    logger.info("beforeEnergyUsed:" + beforeEnergyUsed);
    logger.info("beforeNetUsed:" + beforeNetUsed);
    logger.info("beforeFreeNetUsed:" + beforeFreeNetUsed);

    String input = "da586d881362c0c38eb31b556ce0f7c2837a3ebb60080e8e665a6b92c7541837b95064ba
    txid = PublicMethedForDailybuild.triggerContract(contractAddress,
        "testArray(bytes32,bytes[],address[])", input, true,
        0, maxFeeLimit, contractExcAddress, contractExcKey, blockingStubFull);

    PublicMethedForDailybuild.waitProduceNextBlock(blockingStubFull);
    Optional<TransactionInfo> infoById = null;
    infoById = PublicMethedForDailybuild.getTransactionInfoById(txid, blockingStubFull);
    Assert.assertEquals(1, infoById.get().getResultValue());
    Assert.assertTrue(infoById.get().getResMessage().toStringUtf8()
        .contains("REVERT opcode executed"));
    Long fee = infoById.get().getFee();
    Long netUsed = infoById.get().getReceipt().getNetUsage();
    Long energyUsed = infoById.get().getReceipt().getEnergyUsage();
    Long netFee = infoById.get().getReceipt().getNetFee();
    long energyUsageTotal = infoById.get().getReceipt().getEnergyUsageTotal();
    logger.info("fee:" + fee);
    logger.info("netUsed:" + netUsed);
    logger.info("energyUsed:" + energyUsed);
    logger.info("netFee:" + netFee);
    logger.info("energyUsageTotal:" + energyUsageTotal);
    Protocol.Account infoafter = PublicMethedForDailybuild
        .queryAccount(contractExcKey, blockingStubFull1);
    GrpcAPI.AccountResourceMessage resourceInfoafter = PublicMethedForDailybuild
        .getAccountResource(contractExcAddress,
            blockingStubFull1);
    Long afterBalance = infoafter.getBalance();
    Long afterEnergyUsed = resourceInfoafter.getEnergyUsed();
    Long afterNetUsed = resourceInfoafter.getNetUsed();
    Long afterFreeNetUsed = resourceInfoafter.getFreeNetUsed();
    logger.info("afterBalance:" + afterBalance);
    logger.info("afterEnergyUsed:" + afterEnergyUsed);
    logger.info("afterNetUsed:" + afterNetUsed);
    logger.info("afterFreeNetUsed:" + afterFreeNetUsed);
    Assert.assertTrue(afterBalance + fee == beforeBalance);
    Assert.assertTrue(beforeEnergyUsed + energyUsed >= afterEnergyUsed);
    Assert.assertTrue(beforeFreeNetUsed + netUsed >= afterFreeNetUsed);
    Assert.assertTrue(beforeNetUsed + netUsed >= afterNetUsed);
  }

  /**
   * constructor.
   */
  @AfterClass
  public void shutdown() throws InterruptedException {
    long balance = PublicMethedForDailybuild.queryAccount(contractExcKey, blockingStubFull)
        .getBalance();
    PublicMethedForDailybuild
        .sendcoin(testNetAccountAddress, balance, contractExcAddress, contractExcKey,
            blockingStubFull);
    if (channelFull != null) {
      channelFull.shutdown().awaitTermination(5, TimeUnit.SECONDS);
    }
    if (channelFull1 != null) {
      channelFull1.shutdown().awaitTermination(5, TimeUnit.SECONDS);
    }
  }
}
