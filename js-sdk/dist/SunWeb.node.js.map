{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"ethers\"","webpack:///external \"tronweb\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///./src/helper/ethersUtils.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","sha256","utils","keccak256","toUtf8Bytes","recoverAddress","SigningKey","AbiCoder","SunWeb","mainOptions","arguments","length","undefined","sideOptions","mainGatewayAddress","sideGatewayAddress","sideChainId","privateKey","classCallCheck_default","this","_objectSpread","mainchain","TronWeb","sidechain","isAddress","setMainGatewayAddress","setSideGatewayAddress","setChainId","injectPromise","promiseInjector","validator","trx","self","sign","apply","Error","isString","chainId","priKeyBytes","transaction","code","hexStr2byteArray","chainIdByteArr","byteArr","txID","concat","byteArrHash","signature","crypto","ECKeySign","replace","Array","isArray","includes","push","defaultPrivateKey","useTronHeader","multisig","callback","isFunction","isHex","signatureHex","signString","_context","t0","isObject","address","toHex","fromPrivateKey","toLowerCase","raw_data","contract","parameter","owner_address","signTransaction","t1","callValue","feeLimit","options","depositTrx","notValid","type","gte","gt","lte","at","contractInstance","depositTRX","send","result","_context2","tokenId","tokenValue","depositTrc10","depositTRC10","_context3","functionSelector","num","contractAddress","depositTrc","approveInstance","approve","depositTRC20","depositTRC721","_context4","id","trxHash","mappingTrc","startsWith","mappingTRC20","mappingTRC721","_context9","withdrawTrx","withdrawTRX","_context12","withdrawTrc10","withdrawTRC10","_context13","numOrId","withdrawTrc","parameters","defaultAddress","base58","transactionBuilder","triggerSmartContract","JSON","stringify","signedTransaction","sendRawTransaction","broadcast","err","error","message","tronWeb","toUtf8","shouldPollResponse","checkResult","_callee14","index","output","decoded","_args14","regenerator_default","a","wrap","_context14","prev","next","abrupt","_this","getTransactionInfo","sent","keys","setTimeout","resMessage","hasProperty","rawResponse","decodeOutput","outputs","contractResult","stop","_context15","injectFund","hexAddress","fullNode","request","amount","_context18"],"mappings":"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","file":"SunWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"ethers\");","module.exports = require(\"tronweb\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","\nimport {utils} from 'ethers';\n\nconst keccak256 = utils.keccak256;\nconst sha256 = utils.sha256;\nconst toUtf8Bytes = utils.toUtf8Bytes;\nconst recoverAddress = utils.recoverAddress;\nconst SigningKey = utils.SigningKey;\nconst AbiCoder = utils.AbiCoder;\n\nexport {\n    keccak256,\n    sha256,\n    toUtf8Bytes,\n    recoverAddress,\n    SigningKey,\n    AbiCoder\n}\n","import TronWeb from 'tronweb';\nimport {sha256} from './helper/ethersUtils';\n\nexport default class SunWeb {\n    static TronWeb = TronWeb;\n    constructor(mainOptions = false, sideOptions = false, mainGatewayAddress = false, sideGatewayAddress = false, sideChainId=false, privateKey = false) {\n        mainOptions = {...mainOptions, privateKey};\n        sideOptions = {...sideOptions, privateKey};\n        this.mainchain = new TronWeb(mainOptions);\n        this.sidechain = new TronWeb(sideOptions);\n        this.isAddress = this.mainchain.isAddress;\n        this.utils = this.mainchain.utils;\n        this.setMainGatewayAddress(mainGatewayAddress);\n        this.setSideGatewayAddress(sideGatewayAddress);\n        this.setChainId(sideChainId);\n        this.injectPromise = this.utils.promiseInjector(this);\n        this.validator = this.mainchain.trx.validator;\n        \n        const self = this;\n        this.sidechain.trx.sign = (...args) => {\n            return self.sign(...args);\n        };\n    }\n    setMainGatewayAddress(mainGatewayAddress) {\n        if (!this.isAddress(mainGatewayAddress))\n            throw new Error('Invalid main gateway address provided');\n        this.mainGatewayAddress = mainGatewayAddress;\n    }\n\n    setSideGatewayAddress(sideGatewayAddress) {\n        if (!this.isAddress(sideGatewayAddress))\n            throw new Error('Invalid side gateway address provided');\n        this.sideGatewayAddress = sideGatewayAddress;\n    }\n\n    setChainId(sideChainId) {\n        if (!this.utils.isString(sideChainId) || !sideChainId)\n            throw new Error('Invalid side chainId provided');\n        this.chainId = sideChainId;\n    }\n\n    signTransaction(priKeyBytes, transaction) {\n        if (typeof priKeyBytes === 'string') {\n            priKeyBytes = this.utils.code.hexStr2byteArray(priKeyBytes);\n        }\n        let chainIdByteArr = this.utils.code.hexStr2byteArray(this.chainId);\n\n        let byteArr = this.utils.code.hexStr2byteArray(transaction.txID).concat(chainIdByteArr);\n        let byteArrHash = sha256(byteArr);\n        const signature = this.utils.crypto.ECKeySign(this.utils.code.hexStr2byteArray(byteArrHash.replace(/^0x/, '')), priKeyBytes);\n\n        if (Array.isArray(transaction.signature)) {\n            if (!transaction.signature.includes(signature))\n                transaction.signature.push(signature);\n        } else\n            transaction.signature = [signature];\n        return transaction;\n    }\n\n    async sign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n        if (this.utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.sidechain.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (this.utils.isString(transaction)) {\n\n            if (!this.utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = this.sidechain.trx.signString(transaction, privateKey, useTronHeader);\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!this.utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.sidechain.address.toHex(\n                    this.sidechain.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n                if (address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                this.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n     /**\n     * deposit asset to sidechain\n     */\n    async depositTrx(\n        callValue,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrx, callValue, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue,\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRX().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc10(\n        tokenId,\n        tokenValue,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc10, tokenId, tokenValue, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenId,\n            tokenValue,\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRC10(tokenId, tokenValue).send(options, privateKey);\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc(\n        functionSelector,\n        num,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc, functionSelector, num, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: 0,\n            tokenId: '',\n            tokenValue: 0\n        };\n        try {\n            let result = null;\n            if (functionSelector === 'approve') {\n                const approveInstance = await this.mainchain.contract().at(contractAddress);\n                result = await approveInstance.approve(this.mainGatewayAddress, num).send(options, privateKey)\n            } else {\n                const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n                if (functionSelector === 'depositTRC20') {\n                    result = await contractInstance.depositTRC20(contractAddress, num).send(options, privateKey);\n                } else if (functionSelector === 'depositTRC721') {\n                    result = await contractInstance.depositTRC721(contractAddress, num).send(options, privateKey);\n                }\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async approveTrc20(\n        num,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async approveTrc721(\n        id,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc20(\n        num,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC20';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc721(\n        id,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC721';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    /**\n     * mapping asset TRC20 or TRC721 to DAppChain\n     */\n    async mappingTrc(\n        trxHash,\n        feeLimit,\n        functionSelector,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.mappingTrc, trxHash, feeLimit, functionSelector, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'trxHash',\n                type: 'not-empty-string',\n                value: trxHash\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        trxHash = trxHash.startsWith('0x') ? trxHash : ('0x' + trxHash);\n        options = {\n            feeLimit,\n            ...options,\n            callValue: 0\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            let result = null;\n            if (functionSelector === 'mappingTRC20') {\n                result = await contractInstance.mappingTRC20(trxHash).send(options, privateKey);\n            } else if (functionSelector === 'mappingTRC721') {\n                result = await contractInstance.mappingTRC721(trxHash).send(options, privateKey);\n            } else {\n                callback(new Error('type must be trc20 or trc721'));\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async mappingTrc20(\n        trxHash,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC20';\n        return this.mappingTrc(\n            trxHash,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async mappingTrc721(\n        trxHash,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC721';\n        return this.mappingTrc(\n            trxHash,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    /**\n     * withdraw trx from sidechain to mainchain\n     */\n    async withdrawTrx(\n        callValue,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrx, callValue, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue,\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRX().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc10(\n        tokenId,\n        tokenValue,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc10, tokenId, tokenValue, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenValue,\n            tokenId,\n            callValue: 0,\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRC10(tokenId, tokenValue).send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc(\n        numOrId,\n        feeLimit,\n        contractAddress,  // side chain trc20 contract address after mapping\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc, numOrId, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'numOrId',\n                type: 'integer',\n                value: numOrId,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: 0\n        };\n        const parameters = [\n            {\n                type: 'uint256',\n                value: numOrId\n            }\n        ];\n        const functionSelector = 'withdrawal(uint256)';\n\n        try {\n            const address = privateKey ? this.sidechain.address.fromPrivateKey(privateKey) : this.sidechain.defaultAddress.base58;\n            const transaction = await this.sidechain.transactionBuilder.triggerSmartContract(\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                this.sidechain.address.toHex(address)\n            );\n            if (!transaction.result || !transaction.result.result) {\n                return callback('Unknown error: ' + JSON.stringify(transaction.transaction, null, 2));\n            }\n\n            const signedTransaction = await this.sidechain.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.trx.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.tronWeb.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.sidechain.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc20(\n        num,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        return this.withdrawTrc(\n            num,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async withdrawTrc721(\n        id,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        return this.withdrawTrc(\n            id,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n\n    async injectFund(\n        num,\n        feeLimit,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.injectFund, num, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n\n        try {\n            const address = this.sidechain.address.fromPrivateKey(privateKey);\n            const hexAddress = this.sidechain.address.toHex(address);\n            const transaction = await this.sidechain.fullNode.request('/wallet/fundinject', {\n                owner_address: hexAddress,\n                amount: num\n            }, 'post');\n\n            const signedTransaction = await this.sidechain.trx.sign(transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.trx.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.mainchain.toUtf8(broadcast.message);\n                return callback(err)\n            }\n            return callback(null, signedTransaction.txID);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n}\n\n"],"sourceRoot":""}