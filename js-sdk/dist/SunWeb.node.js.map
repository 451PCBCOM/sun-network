{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"ethers\"","webpack:///external \"tronweb\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///./src/helper/ethersUtils.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","sha256","utils","keccak256","toUtf8Bytes","recoverAddress","SigningKey","AbiCoder","SunWeb","mainOptions","arguments","length","undefined","sideOptions","mainGatewayAddress","sideGatewayAddress","sideChainId","privateKey","classCallCheck_default","this","_objectSpread","mainchain","TronWeb","sidechain","isAddress","setMainGatewayAddress","setSideGatewayAddress","setChainId","injectPromise","promiseInjector","validator","trx","self","sign","apply","multiSign","Error","isString","chainId","priKeyBytes","transaction","code","hexStr2byteArray","chainIdByteArr","byteArr","txID","concat","byteArrHash","signature","crypto","ECKeySign","replace","Array","isArray","includes","push","defaultPrivateKey","permissionId","callback","isFunction","isObject","raw_data","contract","Permission_id","address","toHex","fromPrivateKey","toLowerCase","getSignWeight","signWeight","result","message","foundKey","permission","keys","map","approved_list","indexOf","signTransaction","_context","t0","useTronHeader","multisig","isHex","signatureHex","signString","_context2","parameter","owner_address","t1","callValue","feeLimit","options","depositTrx","notValid","type","gte","gt","lte","at","contractInstance","depositTRX","send","_context3","tokenId","tokenValue","depositTrc10","depositTRC10","_context4","functionSelector","num","contractAddress","depositTrc","approveInstance","approve","depositTRC20","depositTRC721","retryDeposit","retryMapping","_context5","id","trxHash","mappingTrc","startsWith","mappingTRC20","mappingTRC721","_context10","withdrawTrx","withdrawTRX","_context13","withdrawTrc10","withdrawTRC10","_context14","numOrId","withdrawTrc","parameters","defaultAddress","base58","transactionBuilder","triggerSmartContract","JSON","stringify","signedTransaction","sendRawTransaction","broadcast","err","error","tronWeb","toUtf8","shouldPollResponse","checkResult","_callee15","index","output","decoded","_args15","regenerator_default","a","wrap","_context15","prev","next","abrupt","_this","getTransactionInfo","sent","setTimeout","resMessage","hasProperty","rawResponse","decodeOutput","outputs","contractResult","stop","_context16","injectFund","hexAddress","fullNode","request","amount","_context19","nonce"],"mappings":"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","file":"SunWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"ethers\");","module.exports = require(\"tronweb\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","\nimport {utils} from 'ethers';\n\nconst keccak256 = utils.keccak256;\nconst sha256 = utils.sha256;\nconst toUtf8Bytes = utils.toUtf8Bytes;\nconst recoverAddress = utils.recoverAddress;\nconst SigningKey = utils.SigningKey;\nconst AbiCoder = utils.AbiCoder;\n\nexport {\n    keccak256,\n    sha256,\n    toUtf8Bytes,\n    recoverAddress,\n    SigningKey,\n    AbiCoder\n}\n","import TronWeb from 'tronweb';\nimport {sha256} from './helper/ethersUtils';\n\nexport default class SunWeb {\n    static TronWeb = TronWeb;\n    constructor(mainOptions = false, sideOptions = false, mainGatewayAddress = false, sideGatewayAddress = false, sideChainId=false, privateKey = false) {\n        mainOptions = {...mainOptions, privateKey};\n        sideOptions = {...sideOptions, privateKey};\n        this.mainchain = new TronWeb(mainOptions);\n        this.sidechain = new TronWeb(sideOptions);\n        this.isAddress = this.mainchain.isAddress;\n        this.utils = this.mainchain.utils;\n        this.setMainGatewayAddress(mainGatewayAddress);\n        this.setSideGatewayAddress(sideGatewayAddress);\n        this.setChainId(sideChainId);\n        this.injectPromise = this.utils.promiseInjector(this);\n        this.validator = this.mainchain.trx.validator;\n\n        const self = this;\n        this.sidechain.trx.sign = (...args) => {\n            return self.sign(...args);\n        };\n        this.sidechain.trx.multiSign = (...args) => {\n            return self.multiSign(...args);\n        };\n    }\n    setMainGatewayAddress(mainGatewayAddress) {\n        if (!this.isAddress(mainGatewayAddress))\n            throw new Error('Invalid main gateway address provided');\n        this.mainGatewayAddress = mainGatewayAddress;\n    }\n\n    setSideGatewayAddress(sideGatewayAddress) {\n        if (!this.isAddress(sideGatewayAddress))\n            throw new Error('Invalid side gateway address provided');\n        this.sideGatewayAddress = sideGatewayAddress;\n    }\n\n    setChainId(sideChainId) {\n        if (!this.utils.isString(sideChainId) || !sideChainId)\n            throw new Error('Invalid side chainId provided');\n        this.chainId = sideChainId;\n    }\n\n    signTransaction(priKeyBytes, transaction) {\n        if (typeof priKeyBytes === 'string') {\n            priKeyBytes = this.utils.code.hexStr2byteArray(priKeyBytes);\n        }\n        let chainIdByteArr = this.utils.code.hexStr2byteArray(this.chainId);\n\n        let byteArr = this.utils.code.hexStr2byteArray(transaction.txID).concat(chainIdByteArr);\n        let byteArrHash = sha256(byteArr);\n        const signature = this.utils.crypto.ECKeySign(this.utils.code.hexStr2byteArray(byteArrHash.replace(/^0x/, '')), priKeyBytes);\n\n        if (Array.isArray(transaction.signature)) {\n            if (!transaction.signature.includes(signature))\n                transaction.signature.push(signature);\n        } else\n            transaction.signature = [signature];\n        return transaction;\n    }\n\n    async multiSign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, permissionId = false, callback = false) {\n        if (this.utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n        if (!callback) return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!this.utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract) return callback('Invalid transaction provided');\n\n        // set permission id\n        transaction.raw_data.contract[0].Permission_id = permissionId;\n\n        // check if private key insides permission list\n        const address = this.sidechain.address.toHex(this.sidechain.address.fromPrivateKey(privateKey)).toLowerCase();\n        const signWeight = await this.sidechain.trx.getSignWeight(transaction, permissionId);\n\n        if (signWeight.result.code === 'PERMISSION_ERROR') {\n           return callback(signWeight.result.message);\n        }\n\n        let foundKey = false;\n        signWeight.permission.keys.map(key => {\n           if (key.address === address) foundKey = true;\n        });\n\n        if (!foundKey) return callback(privateKey + ' has no permission to sign');\n\n        if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n           return callback(privateKey + ' already sign transaction');\n        }\n\n        // reset transaction\n        if (signWeight.transaction && signWeight.transaction.transaction) {\n            transaction = signWeight.transaction.transaction;\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n        } else {\n             return callback('Invalid transaction provided');\n        }\n\n        // sign\n        try {\n           return callback(null, this.signTransaction(privateKey, transaction));\n        } catch (ex) {\n           callback(ex);\n        }\n    }\n\n    async sign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n        if (this.utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.sidechain.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (this.utils.isString(transaction)) {\n\n            if (!this.utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = this.sidechain.trx.signString(transaction, privateKey, useTronHeader);\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!this.utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.sidechain.address.toHex(\n                    this.sidechain.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n                if (address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                this.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n     /**\n     * deposit asset to sidechain\n     */\n    async depositTrx(\n        callValue,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrx, callValue, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue,\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRX().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc10(\n        tokenId,\n        tokenValue,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc10, tokenId, tokenValue, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenId,\n            tokenValue,\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRC10(tokenId, tokenValue).send(options, privateKey);\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc(\n        functionSelector,\n        num,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc, functionSelector, num, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: 0,\n            tokenId: '',\n            tokenValue: 0\n        };\n        try {\n            let result = null;\n            if (functionSelector === 'approve') {\n                const approveInstance = await this.mainchain.contract().at(contractAddress);\n                result = await approveInstance.approve(this.mainGatewayAddress, num).send(options, privateKey)\n            } else {\n                const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n                if (functionSelector === 'depositTRC20') {\n                    result = await contractInstance.depositTRC20(contractAddress, num).send(options, privateKey);\n                } else if (functionSelector === 'depositTRC721') {\n                    result = await contractInstance.depositTRC721(contractAddress, num).send(options, privateKey);\n                } else if (functionSelector === 'retryDeposit') {\n                    result = await contractInstance.retryDeposit(num).send(options, privateKey); \n                } else if (functionSelector === 'retryMapping') {\n                    result = await contractInstance.retryMapping(num).send(options, privateKey); \n                }\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async approveTrc20(\n        num,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async approveTrc721(\n        id,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc20(\n        num,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC20';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc721(\n        id,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC721';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    /**\n     * mapping asset TRC20 or TRC721 to DAppChain\n     */\n    async mappingTrc(\n        trxHash,\n        feeLimit,\n        functionSelector,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.mappingTrc, trxHash, feeLimit, functionSelector, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'trxHash',\n                type: 'not-empty-string',\n                value: trxHash\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        trxHash = trxHash.startsWith('0x') ? trxHash : ('0x' + trxHash);\n        options = {\n            feeLimit,\n            ...options,\n            callValue: 0\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            let result = null;\n            if (functionSelector === 'mappingTRC20') {\n                result = await contractInstance.mappingTRC20(trxHash).send(options, privateKey);\n            } else if (functionSelector === 'mappingTRC721') {\n                result = await contractInstance.mappingTRC721(trxHash).send(options, privateKey);\n            } else {\n                callback(new Error('type must be trc20 or trc721'));\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async mappingTrc20(\n        trxHash,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC20';\n        return this.mappingTrc(\n            trxHash,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async mappingTrc721(\n        trxHash,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC721';\n        return this.mappingTrc(\n            trxHash,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    /**\n     * withdraw trx from sidechain to mainchain\n     */\n    async withdrawTrx(\n        callValue,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrx, callValue, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue,\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRX().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc10(\n        tokenId,\n        tokenValue,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc10, tokenId, tokenValue, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenValue,\n            tokenId,\n            callValue: 0,\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRC10(tokenId, tokenValue).send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc(\n        functionSelector,\n        numOrId,\n        feeLimit,\n        contractAddress,  // side chain trc20 contract address after mapping\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc, functionSelector, numOrId, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'numOrId',\n                type: 'integer',\n                value: numOrId,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: 0\n        };\n        const parameters = [\n            {\n                type: 'uint256',\n                value: numOrId\n            }\n        ];\n\n        try {\n            const address = privateKey ? this.sidechain.address.fromPrivateKey(privateKey) : this.sidechain.defaultAddress.base58;\n            const transaction = await this.sidechain.transactionBuilder.triggerSmartContract(\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                this.sidechain.address.toHex(address)\n            );\n            if (!transaction.result || !transaction.result.result) {\n                return callback('Unknown error: ' + JSON.stringify(transaction.transaction, null, 2));\n            }\n\n            const signedTransaction = await this.sidechain.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.trx.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.tronWeb.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.sidechain.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc20(\n        num,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'withdrawal(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            num,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async withdrawTrc721(\n        id,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'withdrawal(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            id,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n\n    async injectFund(\n        num,\n        feeLimit,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.injectFund, num, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n\n        try {\n            const address = this.sidechain.address.fromPrivateKey(privateKey);\n            const hexAddress = this.sidechain.address.toHex(address);\n            const transaction = await this.sidechain.fullNode.request('/wallet/fundinject', {\n                owner_address: hexAddress,\n                amount: num\n            }, 'post');\n\n            const signedTransaction = await this.sidechain.trx.sign(transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.trx.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.mainchain.toUtf8(broadcast.message);\n                return callback(err)\n            }\n            return callback(null, signedTransaction.txID);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async retryWithdraw(\n        nonce,\n        feeLimit,\n        options = {},\n        privateKey = this.sidechain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryWithdraw(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            nonce,\n            feeLimit,\n            this.sideGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async retryDeposit(\n        nonce,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryDeposit';\n        return this.depositTrc(\n            functionSelector,\n            nonce,\n            feeLimit,\n            this.mainGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async retryMapping(\n        nonce,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryMapping';\n        return this.depositTrc(\n            functionSelector,\n            nonce,\n            feeLimit,\n            this.mainGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n}\n\n"],"sourceRoot":""}